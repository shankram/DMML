{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**DMML ASSIGNMENT 1 - SHANKAR RAM V (MCS202114)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1. IMPORTING NECESSARY PACKAGES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imblearn in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (0.0)\r\n",
      "Requirement already satisfied: imbalanced-learn in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (from imblearn) (0.9.0)\r\n",
      "Requirement already satisfied: scipy>=1.1.0 in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (from imbalanced-learn->imblearn) (1.7.3)\r\n",
      "Requirement already satisfied: scikit-learn>=1.0.1 in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (from imbalanced-learn->imblearn) (1.0.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (from imbalanced-learn->imblearn) (3.1.0)\r\n",
      "Requirement already satisfied: joblib>=0.11 in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (from imbalanced-learn->imblearn) (1.1.0)\r\n",
      "Requirement already satisfied: numpy>=1.14.6 in /home/h1lo/Downloads/yes/lib/python3.9/site-packages (from imbalanced-learn->imblearn) (1.22.2)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "np.random.seed(42)\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "mpl.rc('axes', labelsize=14)\n",
    "mpl.rc('xtick', labelsize=12)\n",
    "mpl.rc('ytick', labelsize=12)\n",
    "\n",
    "# Where to save the figures\n",
    "PROJECT_ROOT_DIR = \".\"\n",
    "CHAPTER_ID = \"decision_trees\"\n",
    "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
    "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
    "\n",
    "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
    "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
    "    print(\"Saving figure\", fig_id)\n",
    "    if tight_layout:\n",
    "        plt.tight_layout()\n",
    "    plt.savefig(path, format=fig_extension, dpi=resolution)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2. READING AND MODIFYING THE DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('bank-additional-full.csv', sep = ';')\n",
    "\n",
    "#print(data['y'].value_counts())\n",
    "\n",
    "data.drop(['duration'], axis = 1,inplace = True)\n",
    "data.drop(['month'], axis = 1, inplace = True)\n",
    "data.drop(['day_of_week'], axis = 1, inplace = True)\n",
    "data.drop(['contact'], axis = 1, inplace = True)\n",
    "data.drop(['campaign'], axis = 1, inplace = True)\n",
    "\n",
    "#Changing categorical attributes to numerical attributes using Label Encoding.\n",
    "categorical_cols = ['job', 'marital', 'education', 'default', 'poutcome', 'housing', 'default', 'loan']\n",
    "data = pd.get_dummies(data, columns = categorical_cols, drop_first = True)\n",
    "\n",
    "X = data.drop(['y'], axis = 1)\n",
    "y = data['y']\n",
    "\n",
    "feature_names = X.columns\n",
    "\n",
    "#Splitting the data into training and test samples (Default 75-25 split)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n",
    "\n",
    "oversample = SMOTE()\n",
    "X_train, y_train = oversample.fit_resample(np.array(X_train), np.array(y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. FITTING A DECISION TREE CLASSIFIER TO THIS DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(max_depth=3, max_leaf_nodes=16, random_state=42)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "DT = DecisionTreeClassifier(max_depth = 3, max_leaf_nodes = 16, random_state=42)\n",
    "DT.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/h1lo/Downloads/yes/lib/python3.9/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          no       0.94      0.87      0.90      9144\n",
      "         yes       0.35      0.58      0.44      1153\n",
      "\n",
      "    accuracy                           0.83     10297\n",
      "   macro avg       0.65      0.72      0.67     10297\n",
      "weighted avg       0.88      0.83      0.85     10297\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = DT.predict(X_test)\n",
    "y_test = np.array(y_test).flatten()\n",
    "\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.43.0 (0)\n",
       " -->\n",
       "<!-- Title: Tree Pages: 1 -->\n",
       "<svg width=\"1415pt\" height=\"433pt\"\n",
       " viewBox=\"0.00 0.00 1414.50 433.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-429 1410.5,-429 1410.5,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<path fill=\"#ffffff\" stroke=\"black\" d=\"M755,-425C755,-425 585,-425 585,-425 579,-425 573,-419 573,-413 573,-413 573,-354 573,-354 573,-348 579,-342 585,-342 585,-342 755,-342 755,-342 761,-342 767,-348 767,-354 767,-354 767,-413 767,-413 767,-419 761,-425 755,-425\"/>\n",
       "<text text-anchor=\"middle\" x=\"670\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">nr.employed &lt;= 5087.65</text>\n",
       "<text text-anchor=\"middle\" x=\"670\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"670\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 54808</text>\n",
       "<text text-anchor=\"middle\" x=\"670\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [27404, 27404]</text>\n",
       "<text text-anchor=\"middle\" x=\"670\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = N</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<path fill=\"#59ade9\" stroke=\"black\" d=\"M650.5,-306C650.5,-306 471.5,-306 471.5,-306 465.5,-306 459.5,-300 459.5,-294 459.5,-294 459.5,-235 459.5,-235 459.5,-229 465.5,-223 471.5,-223 471.5,-223 650.5,-223 650.5,-223 656.5,-223 662.5,-229 662.5,-235 662.5,-235 662.5,-294 662.5,-294 662.5,-300 656.5,-306 650.5,-306\"/>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">poutcome_success &lt;= 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.237</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 15086</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2071, 13015]</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M632.18,-341.91C623.64,-332.74 614.5,-322.93 605.71,-313.49\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"608.13,-310.95 598.75,-306.02 603.01,-315.72 608.13,-310.95\"/>\n",
       "<text text-anchor=\"middle\" x=\"597.87\" y=\"-327.31\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>2</title>\n",
       "<path fill=\"#f4c9a9\" stroke=\"black\" d=\"M885.5,-306C885.5,-306 724.5,-306 724.5,-306 718.5,-306 712.5,-300 712.5,-294 712.5,-294 712.5,-235 712.5,-235 712.5,-229 718.5,-223 724.5,-223 724.5,-223 885.5,-223 885.5,-223 891.5,-223 897.5,-229 897.5,-235 897.5,-235 897.5,-294 897.5,-294 897.5,-300 891.5,-306 885.5,-306\"/>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">cons.conf.idx &lt;= &#45;46.2</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.462</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 39722</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [25333, 14389]</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = N</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;2 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>0&#45;&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M716.84,-341.91C727.73,-332.47 739.41,-322.34 750.6,-312.65\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"752.98,-315.22 758.25,-306.02 748.4,-309.93 752.98,-315.22\"/>\n",
       "<text text-anchor=\"middle\" x=\"756.46\" y=\"-327.26\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>9</title>\n",
       "<path fill=\"#67b4eb\" stroke=\"black\" d=\"M362,-187C362,-187 156,-187 156,-187 150,-187 144,-181 144,-175 144,-175 144,-116 144,-116 144,-110 150,-104 156,-104 156,-104 362,-104 362,-104 368,-104 374,-110 374,-116 374,-116 374,-175 374,-175 374,-181 368,-187 362,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">poutcome_nonexistent &lt;= 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.304</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9857</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1842, 8015]</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;9 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>1&#45;&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M459.18,-224.05C431.56,-213.35 401.48,-201.7 373.23,-190.76\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"374.32,-187.42 363.73,-187.07 371.79,-193.95 374.32,-187.42\"/>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>10</title>\n",
       "<path fill=\"#42a1e6\" stroke=\"black\" d=\"M651.5,-187C651.5,-187 470.5,-187 470.5,-187 464.5,-187 458.5,-181 458.5,-175 458.5,-175 458.5,-116 458.5,-116 458.5,-110 464.5,-104 470.5,-104 470.5,-104 651.5,-104 651.5,-104 657.5,-104 663.5,-110 663.5,-116 663.5,-116 663.5,-175 663.5,-175 663.5,-181 657.5,-187 651.5,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">education_basic.9y &lt;= 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.084</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5229</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [229, 5000]</text>\n",
       "<text text-anchor=\"middle\" x=\"561\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;10 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>1&#45;&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M561,-222.91C561,-214.65 561,-205.86 561,-197.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"564.5,-197.02 561,-187.02 557.5,-197.02 564.5,-197.02\"/>\n",
       "</g>\n",
       "<!-- 11 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>11</title>\n",
       "<path fill=\"#aad5f4\" stroke=\"black\" d=\"M146,-68C146,-68 12,-68 12,-68 6,-68 0,-62 0,-56 0,-56 0,-12 0,-12 0,-6 6,0 12,0 12,0 146,0 146,0 152,0 158,-6 158,-12 158,-12 158,-56 158,-56 158,-62 152,-68 146,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"79\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.462</text>\n",
       "<text text-anchor=\"middle\" x=\"79\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1664</text>\n",
       "<text text-anchor=\"middle\" x=\"79\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [604, 1060]</text>\n",
       "<text text-anchor=\"middle\" x=\"79\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;11 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>9&#45;&gt;11</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M192.23,-103.88C175.85,-93.92 158.37,-83.29 142.17,-73.43\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"143.68,-70.25 133.32,-68.04 140.04,-76.23 143.68,-70.25\"/>\n",
       "</g>\n",
       "<!-- 12 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>12</title>\n",
       "<path fill=\"#5caeea\" stroke=\"black\" d=\"M330.5,-68C330.5,-68 187.5,-68 187.5,-68 181.5,-68 175.5,-62 175.5,-56 175.5,-56 175.5,-12 175.5,-12 175.5,-6 181.5,0 187.5,0 187.5,0 330.5,0 330.5,0 336.5,0 342.5,-6 342.5,-12 342.5,-12 342.5,-56 342.5,-56 342.5,-62 336.5,-68 330.5,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.257</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8193</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1238, 6955]</text>\n",
       "<text text-anchor=\"middle\" x=\"259\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;12 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>9&#45;&gt;12</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M259,-103.73C259,-95.52 259,-86.86 259,-78.56\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"262.5,-78.3 259,-68.3 255.5,-78.3 262.5,-78.3\"/>\n",
       "</g>\n",
       "<!-- 13 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>13</title>\n",
       "<path fill=\"#41a1e6\" stroke=\"black\" d=\"M506,-68C506,-68 372,-68 372,-68 366,-68 360,-62 360,-56 360,-56 360,-12 360,-12 360,-6 366,0 372,0 372,0 506,0 506,0 512,0 518,-6 518,-12 518,-12 518,-56 518,-56 518,-62 512,-68 506,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"439\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.079</text>\n",
       "<text text-anchor=\"middle\" x=\"439\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5179</text>\n",
       "<text text-anchor=\"middle\" x=\"439\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [212, 4967]</text>\n",
       "<text text-anchor=\"middle\" x=\"439\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 10&#45;&gt;13 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>10&#45;&gt;13</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M515.57,-103.73C505.1,-94.33 493.98,-84.35 483.55,-74.99\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"485.88,-72.37 476.1,-68.3 481.21,-77.58 485.88,-72.37\"/>\n",
       "</g>\n",
       "<!-- 14 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>14</title>\n",
       "<path fill=\"#9fcff2\" stroke=\"black\" d=\"M655.5,-68C655.5,-68 548.5,-68 548.5,-68 542.5,-68 536.5,-62 536.5,-56 536.5,-56 536.5,-12 536.5,-12 536.5,-6 542.5,0 548.5,0 548.5,0 655.5,0 655.5,0 661.5,0 667.5,-6 667.5,-12 667.5,-12 667.5,-56 667.5,-56 667.5,-62 661.5,-68 655.5,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"602\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.449</text>\n",
       "<text text-anchor=\"middle\" x=\"602\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 50</text>\n",
       "<text text-anchor=\"middle\" x=\"602\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 33]</text>\n",
       "<text text-anchor=\"middle\" x=\"602\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 10&#45;&gt;14 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>10&#45;&gt;14</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M576.27,-103.73C579.44,-95.24 582.8,-86.28 586,-77.73\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"589.3,-78.89 589.53,-68.3 582.75,-76.44 589.3,-78.89\"/>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>3</title>\n",
       "<path fill=\"#84c2ef\" stroke=\"black\" d=\"M891,-187C891,-187 719,-187 719,-187 713,-187 707,-181 707,-175 707,-175 707,-116 707,-116 707,-110 713,-104 719,-104 719,-104 891,-104 891,-104 897,-104 903,-110 903,-116 903,-116 903,-175 903,-175 903,-181 897,-187 891,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">cons.price.idx &lt;= 93.075</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.399</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5901</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1624, 4277]</text>\n",
       "<text text-anchor=\"middle\" x=\"805\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>2&#45;&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M805,-222.91C805,-214.65 805,-205.86 805,-197.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"808.5,-197.02 805,-187.02 801.5,-197.02 808.5,-197.02\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>4</title>\n",
       "<path fill=\"#f0b78d\" stroke=\"black\" d=\"M1217.5,-187C1217.5,-187 1050.5,-187 1050.5,-187 1044.5,-187 1038.5,-181 1038.5,-175 1038.5,-175 1038.5,-116 1038.5,-116 1038.5,-110 1044.5,-104 1050.5,-104 1050.5,-104 1217.5,-104 1217.5,-104 1223.5,-104 1229.5,-110 1229.5,-116 1229.5,-116 1229.5,-175 1229.5,-175 1229.5,-181 1223.5,-187 1217.5,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">default_unknown &lt;= 1.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.419</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 33821</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [23709, 10112]</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = N</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;4 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>2&#45;&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M897.52,-230.6C938.43,-216.05 986.73,-198.87 1028.98,-183.85\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1030.21,-187.13 1038.46,-180.48 1027.86,-180.53 1030.21,-187.13\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>5</title>\n",
       "<path fill=\"#44a3e6\" stroke=\"black\" d=\"M832,-68C832,-68 698,-68 698,-68 692,-68 686,-62 686,-56 686,-56 686,-12 686,-12 686,-6 692,0 698,0 698,0 832,0 832,0 838,0 844,-6 844,-12 844,-12 844,-56 844,-56 844,-62 838,-68 832,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"765\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.101</text>\n",
       "<text text-anchor=\"middle\" x=\"765\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2382</text>\n",
       "<text text-anchor=\"middle\" x=\"765\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [127, 2255]</text>\n",
       "<text text-anchor=\"middle\" x=\"765\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;5 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>3&#45;&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M790.11,-103.73C787.01,-95.24 783.73,-86.28 780.61,-77.73\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"783.88,-76.49 777.16,-68.3 777.31,-78.89 783.88,-76.49\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>6</title>\n",
       "<path fill=\"#cce6f8\" stroke=\"black\" d=\"M1016.5,-68C1016.5,-68 873.5,-68 873.5,-68 867.5,-68 861.5,-62 861.5,-56 861.5,-56 861.5,-12 861.5,-12 861.5,-6 867.5,0 873.5,0 873.5,0 1016.5,0 1016.5,0 1022.5,0 1028.5,-6 1028.5,-12 1028.5,-12 1028.5,-56 1028.5,-56 1028.5,-62 1022.5,-68 1016.5,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"945\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.489</text>\n",
       "<text text-anchor=\"middle\" x=\"945\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3519</text>\n",
       "<text text-anchor=\"middle\" x=\"945\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1497, 2022]</text>\n",
       "<text text-anchor=\"middle\" x=\"945\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Y</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;6 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>3&#45;&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M857.13,-103.73C869.26,-94.24 882.15,-84.16 894.22,-74.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"896.7,-77.22 902.43,-68.3 892.39,-71.7 896.7,-77.22\"/>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>7</title>\n",
       "<path fill=\"#f2bf9b\" stroke=\"black\" d=\"M1210,-68C1210,-68 1058,-68 1058,-68 1052,-68 1046,-62 1046,-56 1046,-56 1046,-12 1046,-12 1046,-6 1052,0 1058,0 1058,0 1210,0 1210,0 1216,0 1222,-6 1222,-12 1222,-12 1222,-56 1222,-56 1222,-62 1216,-68 1210,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.443</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 26777</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17923, 8854]</text>\n",
       "<text text-anchor=\"middle\" x=\"1134\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = N</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;7 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>4&#45;&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1134,-103.73C1134,-95.52 1134,-86.86 1134,-78.56\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1137.5,-78.3 1134,-68.3 1130.5,-78.3 1137.5,-78.3\"/>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>8</title>\n",
       "<path fill=\"#eb9c64\" stroke=\"black\" d=\"M1394.5,-68C1394.5,-68 1251.5,-68 1251.5,-68 1245.5,-68 1239.5,-62 1239.5,-56 1239.5,-56 1239.5,-12 1239.5,-12 1239.5,-6 1245.5,0 1251.5,0 1251.5,0 1394.5,0 1394.5,0 1400.5,0 1406.5,-6 1406.5,-12 1406.5,-12 1406.5,-56 1406.5,-56 1406.5,-62 1400.5,-68 1394.5,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"1323\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.293</text>\n",
       "<text text-anchor=\"middle\" x=\"1323\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 7044</text>\n",
       "<text text-anchor=\"middle\" x=\"1323\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5786, 1258]</text>\n",
       "<text text-anchor=\"middle\" x=\"1323\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = N</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;8 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>4&#45;&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1204.11,-103.88C1221.46,-93.83 1240,-83.09 1257.14,-73.16\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1259.07,-76.08 1265.97,-68.04 1255.56,-70.03 1259.07,-76.08\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.sources.Source at 0x7fede05aff40>"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from graphviz import Source\n",
    "from sklearn.tree import export_graphviz\n",
    "\n",
    "export_graphviz(\n",
    "        DT,\n",
    "        out_file=os.path.join(IMAGES_PATH, \"BM_tree.dot\"),\n",
    "        feature_names=feature_names,\n",
    "        class_names=['N','Y'],\n",
    "        rounded=True,\n",
    "        filled=True\n",
    "    )\n",
    "\n",
    "Source.from_file(os.path.join(IMAGES_PATH, \"BM_tree.dot\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4. FITTING A RANDOM FOREST CLASSIFIER AND A BAGGING MODEL TO THIS DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_leaf_nodes=16, n_estimators=125, random_state=42)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "rf = RandomForestClassifier(n_estimators = 125, max_leaf_nodes = 16, random_state = 42)\n",
    "\n",
    "rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/h1lo/Downloads/yes/lib/python3.9/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          no       0.94      0.88      0.91      9144\n",
      "         yes       0.38      0.58      0.46      1153\n",
      "\n",
      "    accuracy                           0.85     10297\n",
      "   macro avg       0.66      0.73      0.68     10297\n",
      "weighted avg       0.88      0.85      0.86     10297\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = rf.predict(X_test)\n",
    "y_test = np.array(y_test).flatten()\n",
    "\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BaggingClassifier(base_estimator=DecisionTreeClassifier(random_state=42),\n",
       "                  max_samples=120, n_estimators=150, random_state=42)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingClassifier\n",
    "\n",
    "bag_clf = BaggingClassifier(\n",
    "    DecisionTreeClassifier(random_state=42), n_estimators=150,\n",
    "    max_samples=120, bootstrap=True, random_state=42)\n",
    "bag_clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/h1lo/Downloads/yes/lib/python3.9/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but BaggingClassifier was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          no       0.94      0.89      0.91      9144\n",
      "         yes       0.39      0.57      0.46      1153\n",
      "\n",
      "    accuracy                           0.85     10297\n",
      "   macro avg       0.67      0.73      0.69     10297\n",
      "weighted avg       0.88      0.85      0.86     10297\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = bag_clf.predict(X_test)\n",
    "y_test = np.array(y_test).flatten()\n",
    "\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*The Random Forest and Bagging models have similar accuracy on this data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5. FITTING A NAIVE BAYES CLASSIFIER TO THIS DATA (W/ LAPLACIAN SMOOTHING)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "NB = GaussianNB()\n",
    "NB.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/h1lo/Downloads/yes/lib/python3.9/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but GaussianNB was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          no       0.94      0.79      0.86      9144\n",
      "         yes       0.27      0.60      0.37      1153\n",
      "\n",
      "    accuracy                           0.77     10297\n",
      "   macro avg       0.60      0.70      0.62     10297\n",
      "weighted avg       0.86      0.77      0.81     10297\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = NB.predict(X_test)\n",
    "y_test = np.array(y_test).flatten()\n",
    "\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6. BOOSTING THE NAIVE BAYES CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdaBoostClassifier(base_estimator=GaussianNB(), learning_rate=0.2,\n",
       "                   n_estimators=100, random_state=42)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "ada_nb = AdaBoostClassifier(\n",
    "    GaussianNB(), n_estimators = 100, \n",
    "    algorithm=\"SAMME.R\", learning_rate=0.2, random_state=42)\n",
    "ada_nb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/h1lo/Downloads/yes/lib/python3.9/site-packages/sklearn/base.py:443: UserWarning: X has feature names, but AdaBoostClassifier was fitted without feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "          no       0.92      0.83      0.88      9144\n",
      "         yes       0.26      0.46      0.33      1153\n",
      "\n",
      "    accuracy                           0.79     10297\n",
      "   macro avg       0.59      0.65      0.60     10297\n",
      "weighted avg       0.85      0.79      0.81     10297\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = ada_nb.predict(X_test)\n",
    "y_test = np.array(y_test).flatten()\n",
    "\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (DMML)",
   "language": "python",
   "name": "dmml"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
